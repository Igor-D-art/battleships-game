(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>h});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),c=t(667),s=t.n(c),d=new URL(t(617),t.b),l=new URL(t(44),t.b),u=a()(r()),A=s()(d),p=s()(l);u.push([n.id,"* {\n    margin: 0;\n    border: none;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n.main {\n    display: flex;\n    justify-content: space-around;\n    height: min(70vh);\n    align-items: center;\n}\n\n.p1b,\n.p2b, \n.board {\n    height: 500px;\n    width: 500px;\n    border: 1px solid black;\n    background-color: white;\n    display: grid;\n    grid-template-columns: repeat(10, minmax(50px, 1fr));\n    grid-template-rows: repeat(10, minmax(50px, 1fr));\n\n}\n\n.p1b div,\n.p2b div {\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    border: 1px solid black;\n}\n\n.curtain {\n    position: absolute;\n    height: 500px;\n    width: 500px;\n}\n\nfooter,\nheader {\n    display: flex;\n    background-color: rgb(122, 151, 248);\n    height: min(15vh);\n    font-size: 7vh;\n    justify-content: center;\n    align-items: center;\n}\n\nfooter{\n    font-size: large;\n}\n\n.hit {\n    background-image: url("+A+");\n    background-color: rgb(245, 169, 169);\n    background-size: 100%;\n}\n\n.ship, .shipGroup>div {\n    background-color: blue;\n}\n\n.miss {\n    background-image: url("+p+");\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.sur{\n    background-image: url("+p+");\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.scale{\n    background-size: 100%;\n}\n\n.startNew{\n    display: flex;\n    flex-direction: column;\n    height: 150px;\n    width: 200px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    top: 25%;\n    left: 44%;\n    border: 1px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.startNew p{\n    font-size: 24px;\n    text-align: center;\n}\n\nbutton {\n    height: 50px;\n    width: 100px;\n    border: 1px solid rgb(0, 0, 0);\n    font-size: 15px;\n}\n\n.placeShips{\n    display: none;\n    flex-direction: column;\n    height: 600px;\n    width: 900px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    border: 2px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.placeShips #board>div{\n    border: 1px solid rgb(0, 0, 0);\n}\n\n.boardwrap{\n    display: flex;\n    width: 800px;\n    justify-content: space-between;\n}\n\n.ships{\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    width: 300px;\n    background-color: white;\n    margin-left: 30px;\n    align-items: flex-end;\n    background-color: rgb(122, 151, 248);\n}\n\n.ships button{\n    margin-top: 20px;\n}\n\n.ships p{\n    font-size: 25px;\n}\n\nbutton:hover {\n    background-color: rgb(17, 0, 255);\n    color: white;\n}\n\n.shipGroup{\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n    width: 95%;\n    align-items: center;\n    margin-top: 20px;\n}\n\n#carrier{\n    grid-template-columns: repeat(4, min(50px));\n}\n\n#battlecruiser{\n    grid-template-columns: repeat(3, min(50px));\n}\n\n#destroyer{\n    grid-template-columns: repeat(2, min(50px));\n}\n\n#gunship{\n    grid-template-columns: repeat(1, min(50px));\n}\n\n#carrier, #battlecruiser, #destroyer, #gunship {\n    display: grid;\n    background-color: white; \n    grid-template-rows: max(48px);\n}\n\n.part{\n    border: 1px solid black;\n    background-color: rgb(17, 0, 255);\n}\n\n.noBorder{\n    border: none;\n}\n\n.shipspot{\n    background-color: blueviolet;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,YAAY;IACZ,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;;;IAGI,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,uBAAuB;IACvB,aAAa;IACb,oDAAoD;IACpD,iDAAiD;;AAErD;;AAEA;;IAEI;;0BAEsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,YAAY;AAChB;;AAEA;;IAEI,aAAa;IACb,oCAAoC;IACpC,iBAAiB;IACjB,cAAc;IACd,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,yDAAuD;IACvD,oCAAoC;IACpC,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,yDAA8C;IAC9C,4BAA4B;IAC5B,oBAAoB;IACpB,2BAA2B;AAC/B;;AAEA;IACI,yDAA8C;IAC9C,4BAA4B;IAC5B,oBAAoB;IACpB,2BAA2B;AAC/B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,oCAAoC;IACpC,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,8BAA8B;IAC9B,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,8BAA8B;IAC9B,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,oCAAoC;IACpC,kBAAkB;IAClB,8BAA8B;IAC9B,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,iBAAiB;IACjB,qBAAqB;IACrB,oCAAoC;AACxC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iCAAiC;IACjC,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;IAClB,UAAU;IACV,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;;AAEA;IACI,uBAAuB;IACvB,iCAAiC;AACrC;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,4BAA4B;AAChC",sourcesContent:["* {\n    margin: 0;\n    border: none;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n}\n\n.main {\n    display: flex;\n    justify-content: space-around;\n    height: min(70vh);\n    align-items: center;\n}\n\n.p1b,\n.p2b, \n.board {\n    height: 500px;\n    width: 500px;\n    border: 1px solid black;\n    background-color: white;\n    display: grid;\n    grid-template-columns: repeat(10, minmax(50px, 1fr));\n    grid-template-rows: repeat(10, minmax(50px, 1fr));\n\n}\n\n.p1b div,\n.p2b div {\n    /* display: flex;\n    justify-content: center;\n    align-items: center; */\n    border: 1px solid black;\n}\n\n.curtain {\n    position: absolute;\n    height: 500px;\n    width: 500px;\n}\n\nfooter,\nheader {\n    display: flex;\n    background-color: rgb(122, 151, 248);\n    height: min(15vh);\n    font-size: 7vh;\n    justify-content: center;\n    align-items: center;\n}\n\nfooter{\n    font-size: large;\n}\n\n.hit {\n    background-image: url(../src/images/icons8-fire-48.png);\n    background-color: rgb(245, 169, 169);\n    background-size: 100%;\n}\n\n.ship, .shipGroup>div {\n    background-color: blue;\n}\n\n.miss {\n    background-image: url(../src/images/close.png);\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.sur{\n    background-image: url(../src/images/close.png);\n    background-repeat: no-repeat;\n    background-size: 70%;\n    background-position: center;\n}\n\n.scale{\n    background-size: 100%;\n}\n\n.startNew{\n    display: flex;\n    flex-direction: column;\n    height: 150px;\n    width: 200px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    top: 25%;\n    left: 44%;\n    border: 1px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.startNew p{\n    font-size: 24px;\n    text-align: center;\n}\n\nbutton {\n    height: 50px;\n    width: 100px;\n    border: 1px solid rgb(0, 0, 0);\n    font-size: 15px;\n}\n\n.placeShips{\n    display: none;\n    flex-direction: column;\n    height: 600px;\n    width: 900px;\n    background-color: rgb(122, 151, 248);\n    position: absolute;\n    border: 2px solid rgb(0, 0, 0);\n    justify-content: space-around;\n    align-items: center;\n}\n\n.placeShips #board>div{\n    border: 1px solid rgb(0, 0, 0);\n}\n\n.boardwrap{\n    display: flex;\n    width: 800px;\n    justify-content: space-between;\n}\n\n.ships{\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    width: 300px;\n    background-color: white;\n    margin-left: 30px;\n    align-items: flex-end;\n    background-color: rgb(122, 151, 248);\n}\n\n.ships button{\n    margin-top: 20px;\n}\n\n.ships p{\n    font-size: 25px;\n}\n\nbutton:hover {\n    background-color: rgb(17, 0, 255);\n    color: white;\n}\n\n.shipGroup{\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n    width: 95%;\n    align-items: center;\n    margin-top: 20px;\n}\n\n#carrier{\n    grid-template-columns: repeat(4, min(50px));\n}\n\n#battlecruiser{\n    grid-template-columns: repeat(3, min(50px));\n}\n\n#destroyer{\n    grid-template-columns: repeat(2, min(50px));\n}\n\n#gunship{\n    grid-template-columns: repeat(1, min(50px));\n}\n\n#carrier, #battlecruiser, #destroyer, #gunship {\n    display: grid;\n    background-color: white; \n    grid-template-rows: max(48px);\n}\n\n.part{\n    border: 1px solid black;\n    background-color: rgb(17, 0, 255);\n}\n\n.noBorder{\n    border: none;\n}\n\n.shipspot{\n    background-color: blueviolet;\n}"],sourceRoot:""}]);const h=u},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],d=o.base?s[0]+o.base:s[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var A=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var h=r(p,o);o.byIndex=c,e.splice(c,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=o(n,r),d=0;d<i.length;d++){var l=t(i[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},44:(n,e,t)=>{n.exports=t.p+"3f1efb87491214c146da.png"},617:(n,e,t)=>{n.exports=t.p+"790566af980138ba22cf.png"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href;var o={};(()=>{t.d(o,{h:()=>Y});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),c=t.n(a),s=t(565),d=t.n(s),l=t(216),u=t.n(l),A=t(589),p=t.n(A),h=t(426),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var f,m,v,b,C,B,I,x,E,y,L,k,w,S=(f=function n(e){var t=1+"".concat(Math.ceil(10*Math.random()))+"".concat(Math.ceil(10*Math.random()));return-1===e.board.illegalMoves.indexOf(t)?t:n(e)},{moveCounter:0,makeMove:function(n,e){-1===e[1].board.illegalMoves.indexOf(n)&&(e[1].board.receiveAttack(n,e[1]),e[0].board.receiveAttack(f(e[0]),e[0]),m(e))},checkWinner:m=function(n){10===n[0].board.shipsSunk().length?(n[1].isWinner=!0,M.displayStartNew("Stupid computer wins!")):1===n[1].board.shipsSunk().length&&(n[0].isWinner=!0,M.displayStartNew("You win!"))},startNew:function(){Y()},startRandom:function(n){console.log(n),n[0].board.randomLocations(),n[1].board.randomLocations(),M.removePlaceShipPopup(),M.displayBoards(n),M.displayShips(n[0].getFleet())},parseCoords:function(n){for(var e=[],t=0;t<n.length;t++){e.push([]);for(var o=0;o<n[t].length;o++){var r="1".concat(n[t][o]);e[t].push(r)}}return e},passCoords:function(n,e){for(var t=0;t<n.length;t++)e[0].board.ships[t].locations=n[t]},startPlaced:function(n){n[1].board.randomLocations(),M.removePlaceShipPopup(),M.displayBoards(n),M.displayShips(n[0].getFleet())}}),M=(b=function(n){for(var e=n;e.firstChild;)e.firstChild.remove();for(var t=1;t<11;t++)for(var o=1;o<11;o++){var r=document.createElement("div");r.setAttribute("id","".concat(t).concat(o)),r.setAttribute("class","container"),e.appendChild(r);for(var i=0;i<B.coords.length;i++)B.coords[i].indexOf(r.id)>=0&&r.classList.add("ship")}},C=function(){console.log(B),console.log(B.vertical);for(var n=1;n<11;n++)for(var e=1;e<11;e++){var t=document.getElementById("".concat(n).concat(e));if(B.carrierCounter<1)x(t,n,e);else if(B.cruiserCounter<2)E(t,n,e);else if(B.destroyerCounter<3)y(t,n,e);else{if(!(B.gunboatCounter<4))return;L(t,n,e)}}},B={coords:[],vertical:!1,carrierCounter:0,cruiserCounter:0,destroyerCounter:0,gunboatCounter:0},I=function(){B.coords=[],B.vertical=!1,B.carrierCounter=0,B.cruiserCounter=0,B.destroyerCounter=0,B.gunboatCounter=0},x=function(n,e,t){var o,r,i,a;console.log(B),console.log(B.vertical),o=n,!1===B.vertical?t<8&&(o.addEventListener("mouseover",(function(){r=o.nextElementSibling,i=r.nextElementSibling,a=i.nextElementSibling,[o,r,i,a].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling,e=n.nextElementSibling,t=e.nextElementSibling;[o,n,e,t].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling,e=n.nextElementSibling,t=e.nextElementSibling;[o,n,e,t].forEach((function(n){n.classList.add("ship")})),B.coords.push(["".concat(o.id),"".concat(n.id),"".concat(e.id),"".concat(t.id)]),B.carrierCounter+=1,b(board),C()}))):!0===B.vertical&&e<8&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t)),i=document.getElementById("".concat(e+3).concat(t));[o,n,r,i].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t)),i=document.getElementById("".concat(e+3).concat(t));[o,n,r,i].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t)),i=document.getElementById("".concat(e+3).concat(t));[o,n,r,i].forEach((function(n){n.classList.add("ship")})),B.coords.push(["".concat(o.id),"".concat(n.id),"".concat(r.id),"".concat(i.id)]),B.carrierCounter+=1,b(board),C()})))},E=function(n,e,t){var o,r,i;o=n,!1===B.vertical?t<9&&(o.addEventListener("mouseover",(function(){r=o.nextElementSibling,i=r.nextElementSibling,[o,r,i].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling,e=n.nextElementSibling;[o,n,e].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling,e=n.nextElementSibling;[o,n,e].forEach((function(n){n.classList.add("ships")})),B.coords.push(["".concat(o.id),"".concat(n.id),"".concat(e.id)]),B.cruiserCounter+=1,b(board),C()}))):!0===B.vertical&&e<9&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t));[o,n,r].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t));[o,n,r].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t)),r=document.getElementById("".concat(e+2).concat(t));[o,n,r].forEach((function(n){n.classList.add("ship")})),B.coords.push(["".concat(o.id),"".concat(n.id),"".concat(r.id)]),B.cruiserCounter+=1,b(board),C()})))},y=function(n,e,t){var o,r;o=n,!1===B.vertical?t<10&&(o.addEventListener("mouseover",(function(){r=o.nextElementSibling,[o,r].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=o.nextElementSibling;[o,n].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=o.nextElementSibling;[o,n].forEach((function(n){n.classList.add("ships")})),B.coords.push(["".concat(o.id),"".concat(n.id)]),B.destroyerCounter+=1,b(board),C()}))):!0===B.vertical&&e<10&&(o.addEventListener("mouseover",(function(){var n=document.getElementById("".concat(e+1).concat(t));[o,n].forEach((function(n){n.classList.add("shipspot")}))})),o.addEventListener("mouseleave",(function(){var n=document.getElementById("".concat(e+1).concat(t));[o,n].forEach((function(n){n.classList.remove("shipspot")}))})),o.addEventListener("click",(function(){var n=document.getElementById("".concat(e+1).concat(t));[o,n].forEach((function(n){n.classList.add("ship")})),B.coords.push(["".concat(o.id),"".concat(n.id)]),B.destroyerCounter+=1,b(board),C()})))},L=function(n){var e=n;e.addEventListener("mouseover",(function(){e.classList.add("shipspot")})),e.addEventListener("mouseleave",(function(){e.classList.remove("shipspot")})),e.addEventListener("click",(function(){e.classList.add("ships"),B.coords.push(["".concat(e.id)]),B.gunboatCounter+=1,b(board),C()}))},{removePlaceShipPopup:function(){document.getElementById("placeShips").style.display="none"},displayBoards:v=function(n){for(var e=1;e<3;e++){for(var t=document.getElementById("p"+e+"b");t.firstChild;)t.firstChild.remove();for(var o=1;o<11;o++)for(var r=function(r){var i=document.createElement("div");i.setAttribute("id",e+"".concat(o)+r),i.setAttribute("class","cell"),2===e&&void 0!==n&&i.addEventListener("click",(function(){S.makeMove(i.id,n)})),t.appendChild(i)},i=1;i<11;i++)r(i)}},displayHit:function(n){var e=document.getElementById(n);e.classList.remove("ship"),e.classList.remove("miss"),e.classList.add("hit")},displayShips:function(n){for(var e=0;e<n.length;e++)""!==n[e]&&document.getElementById("".concat(n[e])).classList.add("ship")},displayMiss:function(n){var e=document.getElementById(n);e.classList.remove("ship"),e.classList.add("miss")},displaySurLocations:function(n){for(var e=function(e){var t=document.getElementById(n[e]);null!=t&&(t.classList.add("sur"),t.classList.add("scale"),setTimeout((function(){t.classList.remove("scale")}),150))},t=0;t<n.length;t++)e(t)},displayStartNew:function(n){var e=document.createElement("div");e.classList.add("startNew"),e.innerHTML="\n            <p> ".concat(n,' </p>\n            <button id="playAgain"> Play again </button> ');var t=document.createElement("div");t.classList.add("curtain");var o=document.getElementById("main"),r=document.getElementById("p2b");r.appendChild(t),o.appendChild(e),document.getElementById("playAgain").addEventListener("click",(function(){r.removeChild(t),o.removeChild(e),S.startNew()}))},placeShipsPopup:function(n){console.log(n[0].board.ships),console.log(n[1].board.ships);var e=document.getElementById("board");v(n),I(),document.getElementById("placeShips").style.display="flex",document.getElementById("ok").addEventListener("click",(function(){if(10===B.coords.length){var e=S.parseCoords(B.coords);S.passCoords(e,n),S.startPlaced(n)}})),document.getElementById("reset").addEventListener("click",(function(){I(),b(e),C()})),document.getElementById("random").addEventListener("click",(function(){S.startRandom(n)})),document.getElementById("rotate").addEventListener("click",(function(){B.vertical?(B.vertical=!1,console.log(B.vertical),b(e),C()):(B.vertical=!0,console.log(B.vertical),b(e),C())}))}}),j=(k=function(n){var e=n,t=Math.ceil(2*Math.random()),o=[];return{setCoord:function(n){!function(n){throw new TypeError('"locations" is read-only')}()},locations:[],hits:o,isSunk:!1,gettingSunk:function(n){return-1===n.hits.indexOf("")&&(n.isSunk=!0,M.displaySurLocations(n.surLocations)),n.isSunk},direction:t,gettingHit:function(n){o[n]="hit"},shipLength:e,surLocations:[],forbLocations:[],startLocation:void 0}},w=function(n){var e=n,t=function(n){var e=n,t=[k(4),k(3),k(3),k(2),k(2),k(2),k(1),k(1),k(1),k(1)],o=function(n){var t,o,r=[],i=[];1===n.direction?(o=Math.ceil(10*Math.random()),t=Math.ceil(Math.random()*(10-(n.shipLength+1)))):(o=Math.ceil(Math.random()*(10-(n.shipLength+1))),t=Math.ceil(10*Math.random()));for(var a=0;a<n.shipLength;a++)1===n.direction?r.push(e+"".concat(o)+(t+a)):r.push(e+"".concat(o+a)+"".concat(t));if(1===n.direction){for(var c=0;c<n.shipLength;c++)i.push(e+"".concat(o+1)+(t+c)),i.push(e+"".concat(o-1)+(t+c));i.push(e+"".concat(o-1)+(t-1)),i.push(e+"".concat(o)+(t-1)),i.push(e+"".concat(o+1)+(t-1)),i.push(e+"".concat(o-1)+(t+n.shipLength)),i.push(e+"".concat(o)+(t+n.shipLength)),i.push(e+"".concat(o+1)+(t+n.shipLength))}else{for(var s=0;s<n.shipLength;s++)i.push(e+"".concat(o+s)+(t+1)),i.push(e+"".concat(o+s)+(t-1));i.push(e+"".concat(o-1)+(t-1)),i.push(e+"".concat(o-1)+t),i.push(e+"".concat(o-1)+(t+1)),i.push(e+"".concat(o+n.shipLength)+(t-1)),i.push(e+"".concat(o+n.shipLength)+t),i.push(e+"".concat(o+n.shipLength)+(t+1))}return[r,i]},r=function(n){for(var e=0;e<t.length;e++){for(var o=0;o<n.length;o++)if(t[e].forbLocations.indexOf(n[o])>=0)return!0;console.log("no collisions on ship ".concat(t[e]))}return!1};return{ships:t,illegalMoves:[],receiveAttack:function(n,e){e.board.illegalMoves.push(n),console.log(e.board.illegalMoves);for(var o=0;o<t.length;o++){if(t[o].locations.indexOf(n)>=0){M.displayHit(n),t[o].gettingHit(t[o].locations.indexOf(n)),t[o].gettingSunk(t[o]),t[o].gettingSunk(t[o])&&(e.board.illegalMoves=e.board.illegalMoves.concat(t[o].surLocations));break}-1===t[o].locations.indexOf(n)&&M.displayMiss(n)}},shipsSunk:function(){for(var n=[],e=0;e<t.length;e++)!0===t[e].isSunk&&n.push(t[e]);return n},randomLocations:function(){for(var n,e,i,a=0;a<t.length;a++){if(void 0===t[a].startLocation){do{var c=o(t[a]);n=c[0],e=c[1],i=n.concat(e)}while(r(n));t[a].locations=n,t[a].surLocations=e,t[a].forbLocations=i}for(var s=0;s<t[a].shipLength;s++)t[a].hits.push("")}}}}(e);return{playerId:e,board:t,getFleet:function(){for(var n=[],e=0;e<t.ships.length;e++)for(var o=0;o<t.ships[e].locations.length;o++)n.push(t.ships[e].locations[o]);return n},isWinner:!1}},{initPlayers:function(){return[w(1),w(2)]}});function Y(){var n=j.initPlayers();console.log(n[0].board.ships),console.log(n[1].board.ships),M.placeShipsPopup(n)}Y()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,